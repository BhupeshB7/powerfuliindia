import React, { useState, useEffect } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import axios from "axios";
import ReTopupUser from "./ReTopupUser";
// import api from ''
const getTokenExpireTime = () => {
  const tokenExpire = localStorage.getItem("tokenExpire");
  return tokenExpire ? parseInt(tokenExpire) : null;
};

const isTokenExpired = () => {
  const expireTime = getTokenExpireTime();
  return expireTime ? expireTime < Date.now() : true;
};

const AdminDashboard = () => {
  const [isTokenValid, setIsTokenValid] = useState(true);
  const [tasks, setTasks] = useState([]);
  //show user data state
  const [showData, setShowData] = useState(false);
  // hide user data state
  const [showUserData, setShowUserData] = useState(false);
  //show user data state
  const [showWithdrawal, setShowWithdrawal] = useState(false);
  const [showRetopUp, setShowRetopUp] = useState(false);
  // hide user data state
  const [showUserWithdrawal, setShowUserWithdrawal] = useState(false);
  const [showUserReTopUp, setShowUserRetopUp] = useState(false);
  //for deposit
  const [depositusers, setDepositUsers] = useState([]);

  const [searchQuery, setSearchQuery] = useState("");
  const [withdrawalQuerySearch, setWithdrawalQuerySearch] = useState("");
  const [searchDepositQuery, setSearchDepositQuery] = useState("");
  const [numberOfActiveUser, setNumberOfActiveUser] = useState(0);
  const [numberOfInActiveUser, setNumberOfInActiveUser] = useState(0);
  const [userId, setUserId] = useState("");
  // const [userID, setUserID] = useState('');
  const [userDetails, setUserDetails] = useState(null);

  const [balance, setBalance] = useState("");
  const [income, setIncome] = useState("");
  const [selfIncome, setSelfIncome] = useState("");
  const [teamIncome, setTeamIncome] = useState("");
  const [withdrawal, setWithdrawal] = useState("");
  const [rewards, setRewards] = useState("");
  const [transfers, setTransfers] = useState([]);
  useEffect(() => {
    const fetchActiveItemsCount = async () => {
      try {
        const response = await axios.get(
          "https://gspserver-0xs1.onrender.com/api/admin/count-active-items"
        );
        const { numberOfActiveUser } = response.data;
        setNumberOfActiveUser(numberOfActiveUser);
      } catch (error) {
        console.error(error);
      }
    };

    fetchActiveItemsCount();
  }, []);

  //Fetch All task
  useEffect(() => {
    fetchTasks();
  }, []);
  const fetchTasks = async () => {
    try {
      const response = await axios.get(
        "https://gspserver-0xs1.onrender.com/api/tasks"
      );
      setTasks(response.data);
    } catch (error) {
      console.error("Failed to fetch tasks", error);
    }
  };

  useEffect(() => {
    const fetchInActiveItemsCount = async () => {
      try {
        const response = await axios.get(
          "https://gspserver-0xs1.onrender.com/api/admin/count-inactive-items"
        );
        const { numberOfInActiveUser } = response.data;
        setNumberOfInActiveUser(numberOfInActiveUser);
      } catch (error) {
        console.error(error);
      }
    };

    fetchInActiveItemsCount();
  }, []);
  useEffect(() => {
    fetchUsers();
  }, []);
  const fetchUsers = async () => {
    try {
      const response = await axios.get(
        `https://gspserver-0xs1.onrender.com/api/deposit/depositusers`
      );
      setDepositUsers(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleApproved = async (userID) => {
    try {
      await axios.patch(
        `https://gspserver-0xs1.onrender.com/api/deposit/activate/${userID}`
      );
      // const updatedUser = response.data;

      // const updatedUsers = users.map((user) =>
      //   user._id === updatedUser._id ? { ...user, is_active: updatedUser.is_active, activationTime: updatedUser.activationTime } : user
      // );
      // setDepositUsers(response.data);
      fetchUsers();
    } catch (error) {
      console.log(error);
    }
  };
  const [showDeposit, setShowDeposit] = useState(false);

  const handleDeposit = () => {
    setShowDeposit(!showDeposit);
  };

  //
  //for Task management Done
  //show user data state
  const [showTask, setShowTask] = useState(false);
  // hide user data state
  const [showUserTask, setShowUserTask] = useState(false);
  useEffect(() => {
    if (isTokenExpired()) {
      setIsTokenValid(false);
      // redirect to homepage
      window.location.href = "/admin-login";
    }
  }, []);

  const [withdrawalRequests, setWithdrawalRequests] = useState([]);
  // const [transactionNumber, setTransactionNumber] = useState('');
  const [transaction, setTransaction] = useState("");

  useEffect(() => {
    axios
      .get("https://gspserver-0xs1.onrender.com/api/withdrawals")
      .then((response) => setWithdrawalRequests(response.data))
      .catch((error) => console.log(error));
  }, []);

  const handleWithdrawalSearch = async () => {
    // Call the API endpoint with the search query parameter
    const response = await fetch(
      `https://gspserver-0xs1.onrender.com/api/withdrawals?search=${withdrawalQuerySearch}`
    );
    const data = await response.json();
    setWithdrawalRequests(data);
  };
  const handleApprove = async (id) => {
    try {
      const response = await axios.put(
        `https://gspserver-0xs1.onrender.com/api/withdrawals/${id}`,
        { status: "approved", transaction }
      );
      setWithdrawalRequests(
        withdrawalRequests.map((request) =>
          request._id === id ? response.data : request
        )
      );
      setTransaction("");
    } catch (error) {
      console.log(error);
    }
  };

  //User Management
  const [users, setUsers] = useState([]);

  // useEffect(() => {
  const getUsers = async () => {
    const response = await axios.get(
      "https://gspserver-0xs1.onrender.com/api/admin/api/users"
    );
    setUsers(response.data);
  };
  // getUsers();
  // }, []);
  useEffect(() => {
    getUsers();
  }, []);
    // Fund useEffect start
    useEffect(() => {
      fetchTransferDetail();
    }, []);
    // Fund useEffect End
  const handleSearch = async () => {
    // Call the API endpoint with the search query parameter
    const response = await fetch(
      `https://gspserver-0xs1.onrender.com/api/admin/api/users?search=${searchQuery}`
    );
    const data = await response.json();
    setUsers(data);
  };

  const handleDeleteUser = async (id) => {
    await axios.delete(
      `https://gspserver-0xs1.onrender.com/api/admin/api/users/${id}`
    );
    setUsers(users.filter((user) => user._id !== id));
  };

  // show the user data function
  const handleShow = () => {
    setShowData(!showData);
  };
  const handleClick = () => {
    handleShow();
    toggleContentVisibility();
  };
  const toggleContentVisibility = () => {
    setShowUserData(!showUserData);
  };

  // show the user Task function
  const handleTask = () => {
    setShowTask(!showTask);
  };
  const handleClickTask = () => {
    handleTask();
    toggleContentVisibilityTask();
  };
  const toggleContentVisibilityTask = () => {
    setShowUserTask(!showUserTask);
  };

  // show the user data function
  const handleShowWithdrawal = () => {
    setShowWithdrawal(!showWithdrawal);
  };
  const handleClickWithdrawal = () => {
    handleShowWithdrawal();
    toggleContentVisibilityWithdrawal();
  };
  const toggleContentVisibilityWithdrawal = () => {
    setShowUserWithdrawal(!showUserWithdrawal);
  };
  const handleShowRetopUp = () => {
    setShowRetopUp(!showRetopUp);
  };
  const handleClickRetopUp = () => {
    handleShowRetopUp();
    toggleContentVisibilityRetopUp();
  };
  const toggleContentVisibilityRetopUp = () => {
    setShowUserRetopUp(!showUserReTopUp);
  };

  const handleActivate = async (userId) => {
    try {
      const response = await axios.patch(
        `https://gspserver-0xs1.onrender.com/api/active/${userId}/activate`
      );
      const updatedUser = response.data;

      const updatedUsers = users.map((user) =>
        user._id === updatedUser._id
          ? {
              ...user,
              is_active: updatedUser.is_active,
              activationTime: updatedUser.activationTime,
            }
          : user
      );
      setUsers(updatedUsers);
    } catch (error) {
      console.log(error);
    }
  };

  const handleDeactivate = async (userId) => {
    try {
      const response = await axios.patch(
        `https://gspserver-0xs1.onrender.com/api/active/${userId}/deactivate`
      );
      const updatedUser = response.data;

      const updatedUsers = users.map((user) =>
        user._id === updatedUser._id
          ? {
              ...user,
              is_active: updatedUser.is_active,
              activationTime: updatedUser.activationTime,
            }
          : user
      );
      setUsers(updatedUsers);
    } catch (error) {
      console.log(error);
    }
  };
  const handleWithdrawalDelete = async (request) => {
    try {
      await axios.delete(
        `https://gspserver-0xs1.onrender.com/api/withdrawalWallet/${request._id}`
      );
      alert("Deleted successfully!");
    } catch (error) {
      console.error(error);
      alert("An error occurred while deleting the user.");
    }
  };

  const fetchUserAccountDetails = async () => {
    try {
      const response = await axios.get(
        "https://gspserver-0xs1.onrender.com/api/users/sponsors",
        {
          params: {
            userId: userId,
          },
        }
      );

      setUserDetails(response.data);
    } catch (error) {
      if (error.response && error.response.status === 404) {
        alert("SORRY, UserId not Found!");
      }
      console.error(error);
    }
  };

  const handleButtonClick = () => {
    if (userId) {
      fetchUserAccountDetails();
    }
  };

  // const handleUserIdChange = (e) => {
  //   setUserId(e.target.value);
  // };

  const formatActivationTime = (time) => {
    const formattedTime = new Date(time).toLocaleString();
    return formattedTime;
  };

  const handleWithdrawalSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "https://gspserver-0xs1.onrender.com/api/users/userWalletUpdating/",
        {
          userId,
          balance,
          income,
          selfIncome,
          teamIncome,
          withdrawal,
          rewards,
        }
      );
      console.log(response.data); // User wallet updated successfully
      alert("Wallet updated successfully!");
    } catch (error) {
      console.error(error);
    }
  };

  const handleDeleteDeposit = (id) => {
    const shouldDelete = window.confirm(
      "Are you sure you want to delete this deposit?"
    );
    if (shouldDelete) {
      deleteDeposit(id);
    }
  };

  const deleteDeposit = async (id) => {
    try {
      const response = await axios.delete(
        `https://gspserver-0xs1.onrender.com/api/deposit/delete/${id}`
      );
      // console.log('Deposit deleted');
      alert(response.data);
      window.location.href = "/admin/dashboard";
    } catch (error) {
      alert(error.response.data);
      console.log(error);
    }
  };
  // Delete all task
  const handleDeleteAllTasks = async () => {
    try {
      await axios.delete("https://gspserver-0xs1.onrender.com/api/tasks");
      // After successful deletion, refetch the tasks to update the list
      alert("All Task Deleted SuccessFully!");
      fetchTasks();
    } catch (error) {
      console.error("Failed to delete all tasks", error);
    }
  };
  // Validation schema using Yup
  const validationSchema = Yup.object({
    title: Yup.string().required("Title is required"),
    videoLink: Yup.string().required("Video Link is required"),
  });

  // Handle form submission
  const handleCreateTask = async (values, { resetForm }) => {
    try {
      await axios.post("https://gspserver-0xs1.onrender.com/api/tasks", values);
      // Clear the input fields
      alert("Task Created SuccessFully");
      resetForm();
    } catch (error) {
      console.error("Failed to create a task", error);
    }
  };
  //Fund Api and Function code
  const fetchTransferDetail = async () => {
    try {
      const response = await axios.get(
        "http://localhost:5000/api/transferDetail"
      );
      setTransfers(response.data);
      console.log("*****------------Fund Transfer Data-----------***");
      console.log(response.data);
      console.log("------Fund Transfer Data-----");
    } catch (error) {
      console.error("Error fetching transfer details:", error);
    }
  };

  const handleFundApprove = async (userId) => {
    try {
      await axios.post(`http://localhost:5000/api/transfer/approve/${userId}`);
      fetchTransferDetail(); // Refresh the list of transfers after approving
    } catch (error) {
      console.error("Error approving transfer:", error);
    }
  };

  const handleFundReject = async (userId) => {
    try {
      await axios.post(`http://localhost:5000/api/transfer/reject/${userId}`);
      fetchTransferDetail(); // Refresh the list of transfers after rejecting
    } catch (error) {
      console.error("Error rejecting transfer:", error);
    }
  };
